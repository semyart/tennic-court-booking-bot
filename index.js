import { Telegraf } from "telegraf";
import cron from 'node-cron';

const API_KEY_BOT = 'key';

const bot = new Telegraf(API_KEY_BOT);

const ruMonths = ['–Ø–Ω–≤–∞—Ä—è', '–§–µ–≤—Ä–∞–ª—è', '–ú–∞—Ä—Ç–∞', '–ê–ø—Ä–µ–ª—è', '–ú–∞—è', '–ò—é–Ω—è', '–ò—é–ª—è', '–ê–≤–≥—É—Å—Ç–∞', '–°–µ–Ω—Ç—è–±—Ä—è', '–û–∫—Ç—è–±—Ä—è', '–ù–æ—è–±—Ä—è', '–î–µ–∫–∞–±—Ä—è'];
const ruDays = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']

bot.telegram.setMyCommands([
    {
        command: 'start',
        description: '–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞',
    },
    {
        command: 'book',
        description: '–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ç–∞. –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–∞—Å—ã –±—Ä–æ–Ω–∏, —Ä–∞–∑–¥–µ–ª—è—Ç—å —á–∞—Å—ã –Ω—É–∂–Ω–æ –∑–∞–ø—è—Ç–æ–π. –ü—Ä–∏–º–µ—Ä /book 14,15',
    },
    {
        command: 'unbook',
        description: '–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏. –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–∞—Å—ã –±—Ä–æ–Ω–∏, —Ä–∞–∑–¥–µ–ª—è—Ç—å —á–∞—Å—ã –Ω—É–∂–Ω–æ –∑–∞–ø—è—Ç–æ–π. –ü—Ä–∏–º–µ—Ä /unbook 14,15',
    }
  ]);


bot.start(async (ctx) => {
    if (activeChats[ctx.chat.id]) {
        ctx.reply('–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–ª—å–∑—É–π—Å—è –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ :)');
        return
    };

    ctx.reply(
        `–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ç–∞. –†–∞–∑ –≤ –¥–µ–Ω—å, –≤ 18:00, —è —Å–æ–∑–¥–∞—é —Ç–µ–º—É –∏ –ø—Ä–∏—Å—ã–ª–∞—é —Ç—É–¥–∞ –ø—É—Å—Ç–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /book. –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–∞—Å—ã –±—Ä–æ–Ω–∏, —Ä–∞–∑–¥–µ–ª—è—Ç—å —á–∞—Å—ã –Ω—É–∂–Ω–æ –∑–∞–ø—è—Ç–æ–π. –ü—Ä–∏–º–µ—Ä /book 14,15

–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Å–≤–æ—é –±—Ä–æ–Ω—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /unbook. –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —á–∞—Å—ã –±—Ä–æ–Ω–∏, —Ä–∞–∑–¥–µ–ª—è—Ç—å —á–∞—Å—ã –Ω—É–∂–Ω–æ –∑–∞–ø—è—Ç–æ–π. –ü—Ä–∏–º–µ—Ä /unbook 14,15

–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å - @semyart, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –∏–¥–µ–∏ –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ. –ò–ª–∏ –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –¢–ì –±–æ—Ç –∏–ª–∏ —Å–≤–æ–π –≤–µ–±-—Å–∞–π—Ç üòÑ

–í—Å–µ–º –¥–æ–±—Ä–∞ –∏ —Ö–æ—Ä–æ—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!
        `
    );
    activeChats[ctx.chat.id] = true;

    cron.schedule('0 18 * * *', async () => {
        const currentDate = new Date();
        currentDate.setDate(currentDate.getDate() + 3);
        const todayDate = currentDate.getDate();
        const todayMonth = currentDate.getMonth();
        const todayDay = currentDate.getDay();

        const topic = await ctx.createForumTopic(`${ruDays[todayDay]} ${todayDate} ${ruMonths[todayMonth]}`);

        createEmptySchedule(topic.message_thread_id);
        const schedule = getSchedule(threads[topic.message_thread_id]);
        bot.telegram.sendMessage(ctx.chat.id, schedule, { message_thread_id: topic.message_thread_id });
    });
});

const threads = {};
const activeChats = {};

function createEmptySchedule(threadId) {
    const emptySchedule = {};

    for (let hour = 6; hour < 24; hour++) {
        emptySchedule[hour] = null;
    }

    threads[threadId] = emptySchedule;
}

function getSchedule(threadObject) {
    let scheduleString = '';
    for (const [key, value] of Object.entries(threadObject)) {
        scheduleString += `${key}:00 ‚Äî ${value ?? ''} \n`;
    }

    return scheduleString;
}

function isUserHasAvailableHours(threadObject, userId, dayIndex) {
    const hoursAvailable = (dayIndex === 0 || dayIndex === 6) ? 1 : 2;
    const userHours = Object.values(threadObject).reduce((hoursCount, threadValue) => {
        if (threadValue === null) {
            return hoursCount;
        }

        const threadUserId = threadValue.split(' id:')[1];
        return +userId === +threadUserId ? hoursCount + 1 : hoursCount;
    }, 0);

    return userHours >= hoursAvailable ? false : true;
}

bot.command('book', async (ctx) => {
    if (ctx.message.message_thread_id) {
        const timeArray = ctx.payload.split(',');
        let isTimeBooked = false;

        for (const time of timeArray) {
            let chosenTime = null;
            try {
                chosenTime = threads[ctx.message.message_thread_id][time];
            } catch (e) {
                ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –î–∞–ª—å–Ω–µ–π—à–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤—Ä—É—á–Ω—É—é.');
                return;
            }

            const dayIndex = ruDays.indexOf(ctx.message.reply_to_message.forum_topic_created.name.split(' ')[0]);
            if (!isUserHasAvailableHours(threads[ctx.message.message_thread_id], ctx.from.id, dayIndex)) {
                ctx.reply('–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–µ–≤—ã—Å–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏. –ù–∞–ø–æ–º–∏–Ω–∞—é, –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏ 2—á, –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ 1—á.');
                break;
            }

            if (chosenTime === null) {
                threads[ctx.message.message_thread_id][time] = `${ctx.from.first_name} id:${ctx.from.id}`;
                isTimeBooked = true;
                continue;
            }

            if (chosenTime === undefined) {
                ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏');
                continue;
            }

            if (chosenTime) {
                ctx.reply(`${time}:00 - —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ`);
                continue;
            }
        }

        if (isTimeBooked) {
            const schedule = getSchedule(threads[ctx.message.message_thread_id]);
            ctx.reply(schedule);
        }
    } else {
        ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–Ω–æ–π —Ç–µ–º.');
    }
})

bot.command('unbook', async (ctx) => {
    if (ctx.message.message_thread_id) {
        const timeArray = ctx.payload.split(',');
        let isTimeUnBooked = false;

        for (const time of timeArray) {
            let chosenTime = null;
            try {
                chosenTime = threads[ctx.message.message_thread_id][time];
            } catch (e) {
                ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –î–∞–ª—å–Ω–µ–π—à–∞—è –∑–∞–ø–∏—Å—å –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤—Ä—É—á–Ω—É—é.');
                return;
            }

            const bookTimeValue = threads[ctx.message.message_thread_id][time];
            if (bookTimeValue === null) {
                ctx.reply(`${time}:00 - —ç—Ç–æ –≤—Ä–µ–º—è –∏ —Ç–∞–∫ —Å–≤–æ–±–æ–¥–Ω–æ, —Å–º–µ–ª–æ –∑–∞–ø–∏—Å—ã–≤–∞–π—Å—è :)`);
                continue;
            }

            if (chosenTime === undefined) {
                ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏');
                continue;
            }

            const timeUserId = bookTimeValue.split(' id:')[1];
            if (+timeUserId !== +ctx.from.id) {
                ctx.reply(`–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ :)`);
                continue;
            }

            threads[ctx.message.message_thread_id][time] = null;
            isTimeUnBooked = true;
        }

        if (isTimeUnBooked) {
            const schedule = getSchedule(threads[ctx.message.message_thread_id]);
            ctx.reply(schedule);
        }
    } else {
        ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–Ω–æ–π —Ç–µ–º.');
    }
});

bot.launch()